#
# pilha : negritando-ecs-ui
# - diagrama
# client
# 	security group 1 (filtro = in, tcp, 80, *ip)
# 		load balance
# 			security group (filtro = in, tcp, 80, security group 1)
# 				task/servico/container
# - dependencias
#   arn:aws:iam::{conta}:policy/cmjUi-parameters-dev
# erro CMJECSServiceHTTP1   negritandoUi1TargetGroup


AWSTemplateFormatVersion: 2010-09-09
Description: Template que cria uma instancia ecs/fargate. Autor Fernando Rodrigues
Parameters:
  CMJServiceName:
    Type: String
    Default: negritandoUi  
  CMJServiceName1:
    Type: String
    Default: negritandoUi1  
  CMJServiceImage:
    Type: String
    Default: nandolrs/cftstui-image    
  CMJVpcId:
    Type: AWS::EC2::VPC::Id
  CMJContainerPort:
    Type: Number
    Default: 80   
  CMJListenerPort:
    Type: Number
    Default: 80    #original = 443 se usar o certificado, 80 se nao usar o certificado     
  CMJTargetGroupHealthCheckPath:
    Type: String
    Default: /   
    # caminho do health do servico
  CMJEnviromentName:
    Type: String
    Default: treinamento
    AllowedValues:
    - dev
    - hom
    - prd
    - treinamento
    # nome do ambiente: dev/hom/prd/...    
  CMJLogGroupName:
    Type: String
    Default: /ecs/ui-front
    # caminho do log do cloud whatch      
  CMJCertificateUsageQuestion:
    Type: String
    Default: no
    AllowedValues :
      - yes
      - no    
    Description : Are you to use a SSL/TSL certificate?
    # to question if a certificate will be use
  CMJCertificateArn:
    Type: String
    Default: arn:aws:acm:<REGIAO>:<CONTA>:certificate/<CERTIFICADO>
    Description : Informar o ARN SSL/TSL do certificado
    # update with the ARN of certificate
  CMJScalableTargetMinCapacity:
    Type: Number
    Default: 2
    Description : Informar a quantidade minima de instancias
    # input the instances minimum quantity   ScalableTarget.MinCapacity
  CMJScalableTargetMaxCapacity:
    Type: Number
    Default: 6
    Description : Informar a quantidade maxima de instancias
    # input the instances maximum quantity   ScalableTarget.MaxCapacity
  CMJScalingPolicyTargetValue:
      Type: Number
      Default: 90  
      Description : Informar percentual maximo de CPU antes de escalar
      # input the max percent CPU before auto scaling   TargetTrackingScalingPolicyConfiguration.TargetValue
Conditions:
  CMJCertificateUsageQuestionCondition: !Equals
    - !Ref CMJCertificateUsageQuestion
    - yes
  CMJCertificateUsageQuestionNoCondition: !Equals
    - !Ref CMJCertificateUsageQuestion
    - no
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: Rede e ambiente
        Parameters: 
          - CMJEnviromentName
          - CMJVpcId
      - 
        Label: 
          default: "Aplicacao"
        Parameters:
          - CMJLogGroupName
      - 
        Label: 
          default: "Container"
        Parameters: 
          - CMJServiceImage
          - CMJContainerPort
          - CMJServiceName
          - CMJServiceName1   
      - 
        Label: 
          default: "Load balance/auto scaling"
        Parameters: 
          - CMJListenerPort
          - CMJTargetGroupHealthCheckPath
          - CMJScalableTargetMinCapacity
          - CMJScalableTargetMaxCapacity
          - CMJScalingPolicyTargetValue      
      - 
        Label: 
          default: "Rota"
        Parameters: 
          - CMJCertificateUsageQuestion
          - CMJCertificateArn                         
    ParameterLabels: 
      CMJVpcId: 
        default: "Nome da rede"   

      CMJEnviromentName: 
        default: "Ambiente"

      CMJLogGroupName: 
        default: "Caminho/nome do log"

      CMJClusterName: 
        default: "Nome do cluster"   

      CMJDBInstanceIdentifier: 
        default: "Nome da instancia"     

      CMJDBName: 
        default: "Nome da base de dados"
        
      CMJContainerPort: 
        default: "Porta"   

      CMJServiceName: 
        default: "Nome do servico"           

      CMJServiceName1: 
        default: "Nome do servico-1"           

      CMJServiceCMJServiceImageName1: 
        default: "Caminho/nome da imagem"   

      CMJListenerPort: 
        default: "Porta"          

      CMJTargetGroupHealthCheckPath: 
        default: "Caminho para determinar saude"    

      CMJScalableTargetMinCapacity: 
        default: "Quantidade minima de instancias"   

      CMJScalingPolicyTargetValue: 
        default: "Escalar quando CPU ultrapassar percentual"   

      CMJScalableTargetMaxCapacity: 
        default: "Quantidade maxima de instancias"    

      CMJCertificateUsageQuestion: 
        default: "Usar certificados?"   

      CMJCertificateArn: 
        default: "Caminho do certificado"     
        
Resources:
  CMJLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref CMJLogGroupName
  CMJContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref CMJServiceName, CMJContainerSecurityGroup]]
      VpcId: !Ref CMJVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref CMJContainerPort
          ToPort: !Ref CMJContainerPort
          SourceSecurityGroupId: !Ref CMJLoadBalancerSecurityGroup      
  CMJLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Grupo de seguranca (Security group) do Load Balance.
      VpcId: !Ref CMJVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref CMJListenerPort
          ToPort: !Ref CMJListenerPort
          CidrIp: 0.0.0.0/0      
  CMJLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # este e o padrao, porem especifique aqui se precisar mudar
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref CMJServiceName, LoadBalancer]]
      # "internal" tambem e uma opcao
      Scheme: internet-facing
      SecurityGroups:
        - !Ref CMJLoadBalancerSecurityGroup
      Subnets:
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
  CMJTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # espera pelo codigo de status  200 por padrao, a menos que especifique outro
      HealthCheckPath: !Ref CMJTargetGroupHealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref CMJServiceName, TargetGroup]]
      Port: !Ref CMJContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # padrao e 300
      TargetType: ip
      VpcId: !Ref CMJVpcId
    DependsOn:
      - CMJLoadBalancer           
  CMJTargetGroupHTTP1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # espera pelo codigo de status  200 por padrao, a menos que especifique outro
      HealthCheckPath: !Ref CMJTargetGroupHealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref CMJServiceName1, TargetGroup]] # , '1'
      Port: !Ref CMJContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # padrao e 300
      TargetType: ip
      VpcId: !Ref CMJVpcId    
    DependsOn:
      - CMJLoadBalancer               
  CMJListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition:  CMJCertificateUsageQuestionNoCondition
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CMJTargetGroupHTTP # ouve HTTPS, mas entrega HTTP para o servico
          Type: forward
      LoadBalancerArn: !Ref CMJLoadBalancer
      Port: !Ref CMJListenerPort
      Protocol: HTTP
    DependsOn:
      - CMJLoadBalancer     
  CMJListenerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref CMJTargetGroupHTTP
                #Weight: Integer
          Type: forward 
      Conditions: 
        - Field : query-string
          QueryStringConfig : 
            Values: 
              - Key: caminho
                Value: 1
      ListenerArn: !Ref CMJListenerHTTP
      Priority: 1      
  CMJListenerRuleHTTP1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref CMJTargetGroupHTTP1
                #Weight: Integer
          Type: forward 
      Conditions: 
        - Field : query-string
          QueryStringConfig : 
            Values: 
              - Key: caminho
                Value: 2
      ListenerArn: !Ref CMJListenerHTTP
      Priority: 2      
  CMJECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 4096  # 512 <?>
      Cpu: 512  # 256 <?>
      ExecutionRoleArn: !ImportValue cmjECSIamRoleEcsTasksExecutionOut # <?> !Ref CMJECSIamRoleEcsTasksExecution
      TaskRoleArn : !ImportValue cmjECSIamRoleEcsTasksOut # <?> !Ref CMJECSIamRoleEcsTasks
      ContainerDefinitions:
        - Name:  !Ref CMJServiceName
          Image: !Ref CMJServiceImage
          PortMappings:
            - ContainerPort: !Ref CMJContainerPort
          # envia os logs ao CloudWatch 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CMJLogGroup
              awslogs-stream-prefix: ecs
          Environment :
            - Name: CMJ_AMBIENTE
              Value : !Ref CMJEnviromentName
            - Name: REACT_APP_SERVER_URL
              Value : !ImportValue  negritandoApiLoadBalancerDNSNameOut # <?> !Ref CMJApiUrl 
            - Name: CMJ_VERSAO
              Value : v1r-1UM                            
            - Name: ECS_CONTAINER_STOP_TIMEOUT
              Value : 120s                   
  CMJECSTaskDefinition1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 512 #4096
      Cpu: 256 #512 
      ExecutionRoleArn: !ImportValue cmjECSIamRoleEcsTasksExecutionOut # <?> !Ref CMJECSIamRoleEcsTasksExecution
      TaskRoleArn :  !ImportValue cmjECSIamRoleEcsTasksOut # <?>!Ref CMJECSIamRoleEcsTasks
      ContainerDefinitions:
        - Name:  !Ref CMJServiceName1  
          Image: !Ref CMJServiceImage
          PortMappings:
            - ContainerPort: !Ref CMJContainerPort
          # envia os logs ao CloudWatch 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CMJLogGroup
              awslogs-stream-prefix: ecs
          Environment :
            - Name: CMJ_AMBIENTE
              Value : !Ref CMJEnviromentName
            - Name: REACT_APP_SERVER_URL
              Value : !ImportValue  negritandoApiLoadBalancerOut # <?> !Ref CMJApiUrl   
            - Name: CMJ_VERSAO
              Value : v1r-2DOIS    
            - Name: ECS_CONTAINER_STOP_TIMEOUT
              Value : 120s                                           
  CMJECSServiceHTTP:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref CMJServiceName
      LaunchType : FARGATE
      TaskDefinition : !Ref CMJECSTaskDefinition
      Cluster : !ImportValue cmjECSClusterOut # <?> !Ref CMJECSCluster   
      DesiredCount : 2
      DeploymentConfiguration :
        MinimumHealthyPercent : 100
        MaximumPercent : 200
      NetworkConfiguration :
        AwsvpcConfiguration :
          SecurityGroups : 
            - !Ref CMJContainerSecurityGroup
          AssignPublicIp : ENABLED
          Subnets : 
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
      LoadBalancers:
        - ContainerName: !Ref CMJServiceName # mesmo que ContainerDefinitions.Name
          ContainerPort: !Ref CMJContainerPort
          TargetGroupArn: !Ref CMJTargetGroupHTTP            
    DependsOn:
      - CMJListenerHTTP
      - CMJTargetGroupHTTP  
  CMJECSServiceHTTP1:             # <?> ta dando erro aleatorio aqui
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref CMJServiceName1 # ServiceName
      LaunchType : FARGATE
      TaskDefinition : !Ref CMJECSTaskDefinition1
      Cluster : !ImportValue cmjECSClusterOut  # <?> !Ref CMJECSCluster   
      DesiredCount : 2
      DeploymentConfiguration :
        MinimumHealthyPercent : 100
        MaximumPercent : 200
      NetworkConfiguration :
        AwsvpcConfiguration :
          SecurityGroups : 
            - !Ref CMJContainerSecurityGroup
          AssignPublicIp : ENABLED
          Subnets : 
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
      LoadBalancers:
        - ContainerName: !Ref CMJServiceName1 # mesmo que ContainerDefinitions.Name
          ContainerPort: !Ref CMJContainerPort
          TargetGroupArn: !Ref CMJTargetGroupHTTP1            
    DependsOn:
      - CMJListenerHTTP           
      - CMJTargetGroupHTTP1  
  CMJScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MinCapacity: !Ref CMJScalableTargetMinCapacity
      MaxCapacity: !Ref CMJScalableTargetMaxCapacity
      ResourceId:  !Join ['/', [service, !ImportValue cmjECSClusterOut, !Ref CMJServiceName ]]  # <?> !Join ['/', [service, !Ref CMJECSCluster, !Ref CMJServiceName ]] 
      RoleARN: 
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount' 
      ServiceNamespace: ecs 
    DependsOn:
      - CMJECSServiceHTTP
  CMJScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: !Join ['', [!Ref CMJServiceName, ScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref CMJScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        PredefinedMetricSpecification: 
            PredefinedMetricType: ECSServiceAverageCPUUtilization # ECSServiceAverageCPUUtilization/ECSServiceAverageMemoryUtilization/ ALBRequestCountPerTarget 
        TargetValue: !Ref CMJScalingPolicyTargetValue