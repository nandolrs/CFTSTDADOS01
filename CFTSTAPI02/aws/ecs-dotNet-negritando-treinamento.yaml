#
# pilha : negritando-ecs-api
# - diagrama
# client
# 	security group 1 (filtro = in, tcp, 80, *ip)
# 		load balance
# 			security group (filtro = in, tcp, 80, security group 1)
# 				task/servico/container
# - dependencias
#   arn:aws:iam::{conta}:policy/cmj-parameters-dev


AWSTemplateFormatVersion: 2010-09-09
Description: Template que cria uma instancia ecs/fargate. Autor Fernando Rodrigues
Parameters:
  ServiceName:
    Type: String
    Default: negritandoApi  
  ServiceName1:
    Type: String
    Default: negritandoApi1  
  ServiceImage:
    Type: String
    Default: nandolrs/cftstapi-image    
  VPC:
    Type: AWS::EC2::VPC::Id
  ContainerPort:
    Type: Number
    Default: 80
  LoadBalancerPort:
    Type: Number
    Default: 80    #original = 443 se usar o certificado, 80 se nao usar o certificado     
  ServiceHealth:
    Type: String
    Default: /api
    # caminho do health do servico
  EnviromentName:
    Type: String
    Default: treinamento
    AllowedValues:
    - dev
    - hom
    - prd
    - treinamento
    # nome do ambiente: dev/hom/prd/...    
  EnviromentNameApi:
    Type: String
    Default: https://api.negritando.com
    # caminho do load balance da api  
  LogGroupNamePath:
    Type: String
    Default: /ecs/api-front
    # caminho do log do cloud whatch      
  CertificateUsageQuestion:
    Type: String
    Default: no
    AllowedValues :
      - yes
      - no    
    Description : Are you to use a SSL/TSL certificate?
    # to question if a certificate will be use
  CMJCertificateArn:
    Type: String
    Default: arn:aws:acm:<REGIAO>:<CONTA>:certificate/<CERTIFICADO>
    Description : Informar o ARN SSL/TSL do certificado
    # update with the ARN of certificate
  CMJAutoScalingMinCapacity:
    Type: Number
    Default: 2
    Description : Informar a quantidade minima de instancias
    # input the instances minimum quantity   ScalableTarget.MinCapacity
  CMJAutoScalingMaxCapacity:
    Type: Number
    Default: 6
    Description : Informar a quantidade maxima de instancias
    # input the instances maximum quantity   ScalableTarget.MaxCapacity
  CMJAutoScalingTargetValue:
      Type: Number
      Default: 3  
      Description : Informar percentual maximo de CPU antes de escalar
      # input the max percent CPU before auto scaling   TargetTrackingScalingPolicyConfiguration.TargetValue
  CMJDBName:
    Default: dbcftreino
    Description: Nome da base de dados
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Deve comecar com uma letra e conter somente coracteres alfanumericos.
Conditions:
  CMJCertificateUsageQuestionCondition: !Equals
    - !Ref CertificateUsageQuestion
    - yes
  CMJCertificateUsageQuestionNoCondition: !Equals
    - !Ref CertificateUsageQuestion
    - no
Metadata:
  'AWS::CloudFormation::Designer':
    0539f1a2-9de4-436a-b92b-5c965b0a443a:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
      dependson:
        - d635bde5-ab48-41d2-bde6-7164956f6d9b
    d635bde5-ab48-41d2-bde6-7164956f6d9b:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
    3066b0fa-3eb0-4c58-9f70-ae9560ac3cf2:
      size:
        width: 60
        height: 60
      position:
        x: 324.36106409780837
        'y': 91.16686066259285
      z: 0
      dependson:
        - d635bde5-ab48-41d2-bde6-7164956f6d9b
    79ce3acf-1400-4a97-aadc-abc2a1766bd9:
      source:
        id: 3066b0fa-3eb0-4c58-9f70-ae9560ac3cf2
      target:
        id: d635bde5-ab48-41d2-bde6-7164956f6d9b
      z: 2
Resources:
  CMJECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: cmj
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d635bde5-ab48-41d2-bde6-7164956f6d9b
  CMJECSIamRoleEcsTasks:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cmjIAMRole-ecs-tasks
      AssumeRolePolicyDocument:
        Statement:
            - Action: 'sts:AssumeRole'
              Principal:
                Service: ecs-tasks.amazonaws.com
              Effect: Allow
            - Action: 'sts:AssumeRole'
              Principal:
                Service: ssm.amazonaws.com
              Effect: Allow
      Policies:
        - PolicyName: cmjIAMPolicy-ssm-parameter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ssm:GetParameter'
                Resource: !Sub  'arn:aws:ssm:*:${AWS::AccountId}:parameter/*'   
                Effect: Allow
  CMJECSIamRoleEcsTasksExecution:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cmjIAMRole-ecs-tasks-execution
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  CMJLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupNamePath
  CMJContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, CMJContainerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref CMJLoadBalancerSecurityGroup      
  CMJLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, CMJLoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0      
  CMJLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # este e o padrao, porem especifique aqui se precisar mudar
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" tambem e uma opcao
      Scheme: internet-facing
      SecurityGroups:
        - !Ref CMJLoadBalancerSecurityGroup
      Subnets:
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
  CMJTargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # espera pelo codigo de status  200 por padrao, a menos que especifique outro
      HealthCheckPath: !Ref ServiceHealth
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # padrao e 300
      TargetType: ip
      VpcId: !Ref VPC
  CMJTargetGroupHTTP1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # espera pelo codigo de status  200 por padrao, a menos que especifique outro
      HealthCheckPath: !Ref ServiceHealth
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup,'1']]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # padrao e 300
      TargetType: ip
      VpcId: !Ref VPC        
  CMJListenerHTTP:
    Condition:  CMJCertificateUsageQuestionNoCondition
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref CMJTargetGroupHTTP # ouve HTTPS, mas entrega HTTP para o servico
          Type: forward
      LoadBalancerArn: !Ref CMJLoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTP
  ListenerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref CMJTargetGroupHTTP
                #Weight: Integer
          Type: forward 
      Conditions: 
        - Field : query-string
          QueryStringConfig : 
            Values: 
              - Key: caminho
                Value: 1
      ListenerArn: !Ref CMJListenerHTTP
      Priority: 1      
  ListenerRuleHTTP1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref CMJTargetGroupHTTP1
                #Weight: Integer
          Type: forward 
      Conditions: 
        - Field : query-string
          QueryStringConfig : 
            Values: 
              - Key: caminho
                Value: 2
      ListenerArn: !Ref CMJListenerHTTP
      Priority: 2      
  CMJECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 512 #4096
      Cpu: 256 #512 
      ExecutionRoleArn: !Ref CMJECSIamRoleEcsTasksExecution
      TaskRoleArn : !Ref CMJECSIamRoleEcsTasks
      ContainerDefinitions:
        - Name:  !Ref ServiceName
          Image: !Ref ServiceImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # envia os logs ao CloudWatch 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CMJLogGroup
              awslogs-stream-prefix: ecs
          Environment :
            - Name: CMJ_AMBIENTE
              Value : !Ref EnviromentName
            - Name: CMJ_VERSAO
              Value : v1r-1UM    
            - Name: CMJ_BASE
              Value : !Ref CMJDBName                  
            - Name: REACT_APP_SERVER_URL
              Value : !Ref EnviromentNameApi
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0539f1a2-9de4-436a-b92b-5c965b0a443a
    DependsOn:
      - CMJECSCluster
  CMJECSTaskDefinition1:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Memory: 512 #4096
      Cpu: 256 #512 
      ExecutionRoleArn: !Ref CMJECSIamRoleEcsTasksExecution
      TaskRoleArn : !Ref CMJECSIamRoleEcsTasks
      ContainerDefinitions:
        - Name:  !Ref ServiceName1  
          Image: !Ref ServiceImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # envia os logs ao CloudWatch 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref CMJLogGroup
              awslogs-stream-prefix: ecs
          Environment :
            - Name: CMJ_AMBIENTE
              Value : !Ref EnviromentName
            - Name: CMJ_VERSAO
              Value : v1r-2DOIS     
            - Name: CMJ_BASE
              Value : !Ref CMJDBName                              
            - Name: REACT_APP_SERVER_URL
              Value : !Ref EnviromentNameApi   
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0539f1a2-9de4-436a-b92b-5c965b0a443a
    DependsOn:
      - CMJECSCluster
  CMJECSServiceHTTP:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref ServiceName
      LaunchType : FARGATE
      TaskDefinition : !Ref CMJECSTaskDefinition
      Cluster : !Ref CMJECSCluster   
      DesiredCount : 2
      DeploymentConfiguration :
        MinimumHealthyPercent : 100
        MaximumPercent : 200
      NetworkConfiguration :
        AwsvpcConfiguration :
          SecurityGroups : 
            - !Ref CMJContainerSecurityGroup
          AssignPublicIp : ENABLED
          Subnets : 
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
      LoadBalancers:
        - ContainerName: !Ref ServiceName # mesmo que ContainerDefinitions.Name
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref CMJTargetGroupHTTP            
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3066b0fa-3eb0-4c58-9f70-ae9560ac3cf2
    DependsOn:
      - CMJECSCluster    
      - CMJListenerHTTP
      - CMJTargetGroupHTTP  
  CMJECSServiceHTTP1:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref ServiceName1 # ServiceName
      LaunchType : FARGATE
      TaskDefinition : !Ref CMJECSTaskDefinition1
      Cluster : !Ref CMJECSCluster   
      DesiredCount : 2
      DeploymentConfiguration :
        MinimumHealthyPercent : 100
        MaximumPercent : 200
      NetworkConfiguration :
        AwsvpcConfiguration :
          SecurityGroups : 
            - !Ref CMJContainerSecurityGroup
          AssignPublicIp : ENABLED
          Subnets : 
            - subnet-ecbaf9b7
            - subnet-561f5b30
            - subnet-06106a4f
      LoadBalancers:
        - ContainerName: !Ref ServiceName1 # mesmo que ContainerDefinitions.Name
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref CMJTargetGroupHTTP1            
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3066b0fa-3eb0-4c58-9f70-ae9560ac3cf2
    DependsOn:
      - CMJECSCluster    
      - CMJListenerHTTP           
      - CMJTargetGroupHTTP1  
  CMJScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MinCapacity: !Ref CMJAutoScalingMinCapacity
      MaxCapacity: !Ref CMJAutoScalingMaxCapacity
      ResourceId: !Join ['/', [service, !Ref CMJECSCluster, !Ref ServiceName ]] 
      RoleARN: 
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount' 
      ServiceNamespace: ecs 
    DependsOn:
      - CMJECSServiceHTTP
  CMJScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: !Join ['', [!Ref ServiceName, ScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref CMJScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        PredefinedMetricSpecification: 
            PredefinedMetricType: ECSServiceAverageCPUUtilization # ECSServiceAverageCPUUtilization/ECSServiceAverageMemoryUtilization/ ALBRequestCountPerTarget 
        TargetValue: !Ref CMJAutoScalingTargetValue
Outputs:
  CMJECSClusterOutputs:
    Description: Cluster ecs/fargate
    Value: !Ref CMJECSCluster
    Export:
      Name: CMJECSClusterOut 
  CMJECSIamRoleEcsTasksOutputs:
    Description: IamRole task ecs/fargate
    Value: !Ref CMJECSIamRoleEcsTasks
    Export:
      Name: CMJECSIamRoleEcsTasksOut    
  CMJECSIamRoleEcsTasksExecutionOutputs:
    Description: IamRole tasks execution ecs/fargate
    Value: !Ref CMJECSIamRoleEcsTasksExecution
    Export:
      Name: CMJECSIamRoleEcsTasksExecutionOut          
  CMJLoadBalancerOutputs:
    Description: Load balance to use
    Value: !Ref CMJLoadBalancer
    Export:
      Name: CMJLoadBalancerOut 
  CMJContainerSecurityGroupOutputs:
    Description: Security group do ECS container
    Value: !Ref CMJContainerSecurityGroup
    Export:
      Name: CCMJContainerSecurityGroupOut       

      